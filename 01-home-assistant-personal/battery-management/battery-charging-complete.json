[
    {
        "id": "battery_complete_tab",
        "type": "tab",
        "label": "智能充電電池管理系統 - 完整版",
        "disabled": false,
        "info": "完整的智能充電電池管理系統\n\n功能：\n1. 手動充電自動計時關閉\n2. 三個獨立的通知服務\n3. 完整的debug輸出\n4. 維護充電功能\n\n支援設備：\n- 牧田BL1041B (media_player.volume_set)\n- ENELOOP 3號 (switch.tp_link_power_strip_eb2f_cha_shang_5)\n- ENELOOP 4號 (switch.tp_link_power_strip_eb2f_cha_shang_6)\n\n通知服務：\n- NotifyHelper (notify.notify)\n- Synology Chat (notify.synology_chat_bot_3)\n- Telegram (notify.telegram)",
        "env": []
    },
    {
        "id": "init_system",
        "type": "inject",
        "z": "battery_complete_tab",
        "name": "系統初始化",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 3,
        "topic": "",
        "payload": "initialize",
        "payloadType": "str",
        "x": 120,
        "y": 60,
        "wires": [["setup_config"]]
    },
    {
        "id": "setup_config",
        "type": "function",
        "z": "battery_complete_tab",
        "name": "載入配置",
        "func": "// 電池配置\nconst batteries = {\n    makita: {\n        entityId: 'media_player.volume_set',\n        name: '牧田BL1041B充電電池',\n        chargingTime: 90,\n        maintenanceDays: 30,\n        domain: 'media_player'\n    },\n    eneloop_aa: {\n        entityId: 'switch.tp_link_power_strip_eb2f_cha_shang_5',\n        name: 'ENELOOP 3號充電電池',\n        chargingTime: 240,\n        maintenanceDays: 60,\n        domain: 'switch'\n    },\n    eneloop_aaa: {\n        entityId: 'switch.tp_link_power_strip_eb2f_cha_shang_6',\n        name: 'ENELOOP 4號充電電池',\n        chargingTime: 210,\n        maintenanceDays: 60,\n        domain: 'switch'\n    }\n};\n\n// 通知服務配置\nconst notifications = {\n    notifyHelper: {\n        service: 'notify',\n        enabled: true\n    },\n    synologyChat: {\n        service: 'synology_chat_bot_3',\n        enabled: true\n    },\n    telegram: {\n        service: 'telegram',\n        enabled: true\n    }\n};\n\n// 儲存配置\nflow.set('batteries', batteries);\nflow.set('notifications', notifications);\n\n// 初始化充電記錄\nconst records = flow.get('chargingRecords') || {};\nObject.keys(batteries).forEach(key => {\n    if (!records[key]) {\n        records[key] = {\n            lastCharge: null,\n            count: 0\n        };\n    }\n});\nflow.set('chargingRecords', records);\n\nmsg.payload = {\n    status: 'initialized',\n    batteries: Object.keys(batteries).length,\n    notifications: Object.keys(notifications).length,\n    timestamp: new Date().toISOString()\n};\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"系統已初始化\"});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [["debug_init"]]
    },
    {
        "id": "debug_init",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "初始化Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "makita_state",
        "type": "server-state-changed",
        "z": "battery_complete_tab",
        "name": "牧田電池狀態",
        "server": "ha_server",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": ["media_player.volume_set"],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            }
        ],
        "x": 120,
        "y": 140,
        "wires": [["charging_handler"]]
    },
    {
        "id": "eneloop_aa_state",
        "type": "server-state-changed",
        "z": "battery_complete_tab",
        "name": "ENELOOP 3號狀態",
        "server": "ha_server",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": ["switch.tp_link_power_strip_eb2f_cha_shang_5"],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            }
        ],
        "x": 120,
        "y": 200,
        "wires": [["charging_handler"]]
    },
    {
        "id": "eneloop_aaa_state",
        "type": "server-state-changed",
        "z": "battery_complete_tab",
        "name": "ENELOOP 4號狀態",
        "server": "ha_server",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": ["switch.tp_link_power_strip_eb2f_cha_shang_6"],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            }
        ],
        "x": 120,
        "y": 260,
        "wires": [["charging_handler"]]
    },
    {
        "id": "charging_handler",
        "type": "function",
        "z": "battery_complete_tab",
        "name": "充電處理器",
        "func": "// 獲取配置\nconst batteries = flow.get('batteries');\nif (!batteries) {\n    node.error('系統未初始化，請先執行系統初始化');\n    return null;\n}\n\n// 解析狀態變化\nconst newState = msg.payload;\nconst oldState = msg.data.old_state?.state;\nconst entityId = msg.data.entity_id;\n\n// 找到對應的電池\nlet batteryKey = null;\nlet battery = null;\n\nfor (const [key, config] of Object.entries(batteries)) {\n    if (config.entityId === entityId) {\n        batteryKey = key;\n        battery = config;\n        break;\n    }\n}\n\nif (!battery) {\n    node.error(`找不到實體 ${entityId} 的配置`);\n    return null;\n}\n\n// 準備輸出\nconst outputs = [null, null, null]; // [通知, 控制, debug]\n\n// 檢查開啟狀態 (off -> on)\nif (oldState === 'off' && newState === 'on') {\n    // 清除現有計時器\n    const timerId = flow.get(`${batteryKey}_timer`);\n    if (timerId) {\n        clearTimeout(timerId);\n    }\n    \n    // 記錄開始時間\n    const startTime = new Date();\n    flow.set(`${batteryKey}_start`, startTime.getTime());\n    \n    // 更新充電記錄\n    const records = flow.get('chargingRecords') || {};\n    if (!records[batteryKey]) records[batteryKey] = {};\n    records[batteryKey].lastCharge = startTime.toISOString();\n    records[batteryKey].count = (records[batteryKey].count || 0) + 1;\n    flow.set('chargingRecords', records);\n    \n    // 設定自動關閉計時器\n    const chargingMs = battery.chargingTime * 60 * 1000;\n    const newTimerId = setTimeout(() => {\n        // 發送關閉命令\n        const controlMsg = {\n            payload: {\n                domain: battery.domain,\n                service: 'turn_off',\n                target: {\n                    entity_id: entityId\n                }\n            }\n        };\n        \n        // 發送到控制輸出\n        node.send([null, controlMsg, {\n            payload: `自動關閉 ${battery.name}`,\n            batteryKey: batteryKey,\n            action: 'auto_stop'\n        }]);\n        \n        flow.set(`${batteryKey}_timer`, null);\n    }, chargingMs);\n    \n    flow.set(`${batteryKey}_timer`, newTimerId);\n    \n    // 準備通知訊息\n    const notifyMsg = {\n        payload: {\n            title: '🔋 充電開始',\n            message: `🔋 ${battery.name} 開始充電\\n⏱️ 預計時間：${battery.chargingTime}分鐘\\n🕐 開始時間：${startTime.toLocaleString('zh-TW')}`\n        },\n        batteryKey: batteryKey,\n        action: 'start'\n    };\n    \n    outputs[0] = notifyMsg;\n    outputs[2] = {\n        payload: `${battery.name} 開始充電`,\n        batteryKey: batteryKey,\n        chargingTime: battery.chargingTime,\n        timerId: newTimerId\n    };\n}\n\n// 檢查關閉狀態 (on -> off)\nelse if (newState === 'off' && oldState === 'on') {\n    // 清除計時器\n    const timerId = flow.get(`${batteryKey}_timer`);\n    if (timerId) {\n        clearTimeout(timerId);\n        flow.set(`${batteryKey}_timer`, null);\n    }\n    \n    // 計算實際時間\n    const startTime = flow.get(`${batteryKey}_start`);\n    const actualTime = startTime ? Math.round((Date.now() - startTime) / 60000) : 0;\n    \n    // 準備完成通知\n    const notifyMsg = {\n        payload: {\n            title: '✅ 充電完成',\n            message: `✅ ${battery.name} 充電完成\\n⏱️ 充電時長：${actualTime}分鐘\\n🕐 完成時間：${new Date().toLocaleString('zh-TW')}`\n        },\n        batteryKey: batteryKey,\n        action: 'complete'\n    };\n    \n    outputs[0] = notifyMsg;\n    outputs[2] = {\n        payload: `${battery.name} 充電完成`,\n        batteryKey: batteryKey,\n        actualTime: actualTime\n    };\n}\n\nreturn outputs;",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [["notify_splitter"], ["device_control"], ["debug_charging"]]
    },
    {
        "id": "notify_splitter",
        "type": "function",
        "z": "battery_complete_tab",
        "name": "通知分發器",
        "func": "// 檢查是否有通知訊息\nif (!msg || !msg.payload) {\n    return [null, null, null];\n}\n\n// 檢查靜音時間 (22:00-07:00)\nconst now = new Date();\nconst hour = now.getHours();\nconst isQuiet = hour >= 22 || hour < 7;\n\nif (isQuiet && msg.action !== 'error') {\n    return [null, null, null];\n}\n\nconst title = msg.payload.title;\nconst message = msg.payload.message;\n\n// 創建三個通知訊息\nconst notify1 = {\n    payload: {\n        domain: 'notify',\n        service: 'notify',\n        data: {\n            title: title,\n            message: message\n        }\n    }\n};\n\nconst notify2 = {\n    payload: {\n        domain: 'notify',\n        service: 'synology_chat_bot_3',\n        data: {\n            title: title,\n            message: message\n        }\n    }\n};\n\nconst notify3 = {\n    payload: {\n        domain: 'notify',\n        service: 'telegram',\n        data: {\n            title: title,\n            message: message\n        }\n    }\n};\n\nreturn [notify1, notify2, notify3];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [["notify_helper"], ["synology_chat"], ["telegram_bot"]]
    },
    {
        "id": "notify_helper",
        "type": "api-call-service",
        "z": "battery_complete_tab",
        "name": "NotifyHelper",
        "server": "ha_server",
        "version": 6,
        "debugenabled": false,
        "domain": "notify",
        "service": "notify",
        "areaId": [],
        "deviceId": [],
        "entityId": "",
        "data": "{\"title\": msg.payload.data.title, \"message\": msg.payload.data.message}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 800,
        "y": 120,
        "wires": [["debug_notify1"]]
    },
    {
        "id": "synology_chat",
        "type": "api-call-service",
        "z": "battery_complete_tab",
        "name": "Synology Chat",
        "server": "ha_server",
        "version": 6,
        "debugenabled": false,
        "domain": "notify",
        "service": "synology_chat_bot_3",
        "areaId": [],
        "deviceId": [],
        "entityId": "",
        "data": "{\"title\": msg.payload.data.title, \"message\": msg.payload.data.message}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 800,
        "y": 160,
        "wires": [["debug_notify2"]]
    },
    {
        "id": "telegram_bot",
        "type": "api-call-service",
        "z": "battery_complete_tab",
        "name": "Telegram",
        "server": "ha_server",
        "version": 6,
        "debugenabled": false,
        "domain": "notify",
        "service": "telegram",
        "areaId": [],
        "deviceId": [],
        "entityId": "",
        "data": "{\"title\": msg.payload.data.title, \"message\": msg.payload.data.message}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 800,
        "y": 200,
        "wires": [["debug_notify3"]]
    },
    {
        "id": "device_control",
        "type": "api-call-service",
        "z": "battery_complete_tab",
        "name": "設備控制",
        "server": "ha_server",
        "version": 6,
        "debugenabled": false,
        "domain": "switch",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": "msg.payload.target.entity_id",
        "data": "{}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 580,
        "y": 240,
        "wires": [["debug_control"]]
    },
    {
        "id": "debug_charging",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "充電Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 280,
        "wires": []
    },
    {
        "id": "debug_notify1",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "NotifyHelper Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 120,
        "wires": []
    },
    {
        "id": "debug_notify2",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "Synology Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "debug_notify3",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "Telegram Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "debug_control",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "控制Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 240,
        "wires": []
    },
    {
        "id": "maintenance_timer",
        "type": "inject",
        "z": "battery_complete_tab",
        "name": "維護檢查 (每日8點)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "maintenance",
        "payloadType": "str",
        "x": 140,
        "y": 360,
        "wires": [["maintenance_check"]]
    },
    {
        "id": "manual_maintenance",
        "type": "inject",
        "z": "battery_complete_tab",
        "name": "手動維護檢查",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "manual_maintenance",
        "payloadType": "str",
        "x": 130,
        "y": 400,
        "wires": [["maintenance_check"]]
    },
    {
        "id": "maintenance_check",
        "type": "function",
        "z": "battery_complete_tab",
        "name": "維護檢查邏輯",
        "func": "const batteries = flow.get('batteries');\nconst records = flow.get('chargingRecords') || {};\n\nif (!batteries) {\n    return [null, null, {payload: '系統未初始化'}];\n}\n\nconst now = new Date();\nconst results = [];\n\nObject.keys(batteries).forEach(key => {\n    const battery = batteries[key];\n    const record = records[key];\n    \n    if (!record || !record.lastCharge) {\n        return; // 跳過沒有記錄的電池\n    }\n    \n    const lastCharge = new Date(record.lastCharge);\n    const daysSince = Math.floor((now - lastCharge) / (1000 * 60 * 60 * 24));\n    \n    if (daysSince >= battery.maintenanceDays) {\n        // 需要維護充電\n        const notifyMsg = {\n            payload: {\n                title: '🔄 維護充電',\n                message: `🔄 ${battery.name} 需要維護充電\\n📅 距離上次充電：${daysSince}天\\n⏱️ 維護週期：${battery.maintenanceDays}天`\n            },\n            batteryKey: key,\n            action: 'maintenance'\n        };\n        \n        const controlMsg = {\n            payload: {\n                domain: battery.domain,\n                service: 'turn_on',\n                target: {\n                    entity_id: battery.entityId\n                }\n            }\n        };\n        \n        const debugMsg = {\n            payload: `維護充電：${battery.name}，${daysSince}天未充電`,\n            batteryKey: key,\n            daysSince: daysSince\n        };\n        \n        results.push([notifyMsg, controlMsg, debugMsg]);\n    }\n});\n\nif (results.length > 0) {\n    return results;\n} else {\n    return [null, null, {payload: '所有電池都在維護週期內，無需維護充電'}];\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [["notify_splitter"], ["device_control"], ["debug_maintenance"]]
    },
    {
        "id": "debug_maintenance",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "維護Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "view_status",
        "type": "inject",
        "z": "battery_complete_tab",
        "name": "查看系統狀態",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "status",
        "payloadType": "str",
        "x": 130,
        "y": 460,
        "wires": [["status_report"]]
    },
    {
        "id": "status_report",
        "type": "function",
        "z": "battery_complete_tab",
        "name": "狀態報告",
        "func": "const batteries = flow.get('batteries');\nconst records = flow.get('chargingRecords') || {};\n\nif (!batteries) {\n    msg.payload = '❌ 系統未初始化';\n    return msg;\n}\n\nconst now = new Date();\nlet report = '📊 智能充電電池管理系統狀態報告\\n\\n';\n\nObject.keys(batteries).forEach(key => {\n    const battery = batteries[key];\n    const record = records[key] || {};\n    \n    report += `🔋 ${battery.name}\\n`;\n    report += `   📍 實體ID：${battery.entityId}\\n`;\n    report += `   ⏱️ 充電時間：${battery.chargingTime}分鐘\\n`;\n    report += `   🔄 維護週期：${battery.maintenanceDays}天\\n`;\n    \n    if (record.lastCharge) {\n        const lastCharge = new Date(record.lastCharge);\n        const daysSince = Math.floor((now - lastCharge) / (1000 * 60 * 60 * 24));\n        \n        report += `   📅 上次充電：${lastCharge.toLocaleString('zh-TW')}\\n`;\n        report += `   📈 充電次數：${record.count || 0}次\\n`;\n        report += `   ⏰ 距今天數：${daysSince}天\\n`;\n        \n        if (daysSince >= battery.maintenanceDays) {\n            report += `   ⚠️ 狀態：需要維護充電\\n`;\n        } else {\n            const daysLeft = battery.maintenanceDays - daysSince;\n            report += `   ✅ 狀態：正常（${daysLeft}天後需維護）\\n`;\n        }\n    } else {\n        report += `   ❌ 狀態：無充電記錄\\n`;\n    }\n    \n    // 檢查是否有活動計時器\n    const timerId = flow.get(`${key}_timer`);\n    if (timerId) {\n        report += `   🔄 狀態：正在充電中\\n`;\n    }\n    \n    report += '\\n';\n});\n\nreport += `🕐 報告時間：${now.toLocaleString('zh-TW')}`;\n\nmsg.payload = report;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [["debug_status"]]
    },
    {
        "id": "debug_status",
        "type": "debug",
        "z": "battery_complete_tab",
        "name": "狀態Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "ha_server",
        "type": "server",
        "name": "Home Assistant",
        "version": 4,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": 30
    }
]
